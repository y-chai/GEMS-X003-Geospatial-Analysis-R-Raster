updateR()
knitr::opts_chunk$set(echo = TRUE)
# Install and load packages needed for this workshop
packages_to_load <- c("terra", "sf", "tmap", "data.table")
for ( package in packages_to_load ) {
# Check if package is already installed, if not, install and load the package
if (!require(package, character.only=T, quietly=T, warn.conflicts=F)) {
install.packages(package)
suppressPackageStartupMessages(library(package, character.only=T, quietly=T, warn.conflicts=F))
}
}
# Set plot options
options(repr.plot.width = 8, repr.plot.height = 4)
ras <- rast(nrow = 6, ncol = 6, xmin = -1.5, xmax = 1.5, ymin = -1.5, ymax = 1.5)
ras
?rast
# Assign known values to raster cells
ras_a <- ras
values(ras_a) <- 1:ncell(ras_a)
# Assign random values to raster cells
ras_b <- ras
set.seed(1234)
values(ras_b) <- runif(ncell(ras_b))*10
# plot two rasters
par(mfrow=c(1,2))
plot(ras_a, main="Raster with values 1:36")
plot(ras_b, main="Raster with random values")
soil_order = c("clay", "silt", "sand")
set.seed(1234)
soil_char = sample(soil_order, 36, replace = TRUE)
soil_fact = factor(soil_char, levels = soil_order)
soil = rast(nrow = 6, ncol = 6, res = 0.5,
xmin = -1.5, xmax = 1.5, ymin = -1.5, ymax = 1.5,
vals = soil_fact)
soil
plot(soil)
nrow(ras_a) # number of rows
ncol(ras_a) # number of columns
ncell(ras_a) # number of cells
ext(ras_a) # raster extent
res(ras_a) # resolution
crs(ras_a) # coordiante reference system
hist(ras_b)  # histogram of raster cell values
r_stack = c(ras_a, ras_b, soil)
names(r_stack) = c("area", "prod" , "soil")
r_stack
plot(r_stack)
# Read in raster files
spam_H_MAIZ_A_mn <- rast("./data/MN/spam/spam_H_MAIZ_A_mn.tif")
spam_P_MAIZ_A_mn <- rast("./data/MN/spam/spam_P_MAIZ_A_mn.tif")
# Check for extent, resolution, and crs
ext(spam_H_MAIZ_A_mn)
ext(spam_P_MAIZ_A_mn)
res(spam_H_MAIZ_A_mn)
res(spam_P_MAIZ_A_mn)
crs(spam_H_MAIZ_A_mn)
crs(spam_P_MAIZ_A_mn)
spam_MAIZ_A_mn <- c(spam_H_MAIZ_A_mn, spam_P_MAIZ_A_mn)
plot(spam_MAIZ_A_mn)
hist(spam_MAIZ_A_mn)
# Your code
# Your code
# row 3, column 3
ras_a[3, 3]
# cell ID 15
ras_a[15]
# all values
values(r_stack, mat=TRUE, dataframe=FALSE)
# all values
values(r_stack, mat=TRUE, dataframe=TRUE)
# all values
values(r_stack, mat=F, dataframe=TRUE)
?values
# all values
values(r_stack, mat=T, dataframe=TRUE)
# row 3-4
values(ras_a, mat=FALSE, dataframe=FALSE, row = 3, nrows = 2, col=1, ncols=2)
# row 3-4
values(ras_a, mat=T, dataframe=FALSE, row = 3, nrows = 2, col=1, ncols=2)
# all values
values(r_stack, mat=TRUE, dataframe=TRUE)
# row 3-4
values(ras_a, mat=FALSE, dataframe=FALSE, row = 3, nrows = 2, col=1, ncols=2)
# Method 1
subset(r_stack, "area")
# Method 2
r_stack[["area"]]
# Method 3
r_stack$area
area <- ras_a
areaX2 <- area*2
areaSq <- area^2
# Plot
par(mfrow=c(1,2))
plot(areaX2, main="Area Doubled")
plot(areaSq, main="Area Squared")
mean(areaX2, areaSq)
mean(areaX2, areaSq)
mean(areaX2)
mean(areaX2, areaSq)
area_cap <- area
area_cap[area_cap >= 25 ] <- 25
# Plot
plot(area_cap, main="Capped Area at 25")
yield <- ras_b/ras_a
plot(yield)
area_focal_1 = focal(area, w = matrix(1, nrow = 3, ncol = 3), fun = min)
area_focal_2 = focal(area, w = matrix(1, nrow = 3, ncol = 3), fun = min, na.rm=TRUE, pad=T, fillvalue=NA)
# Plot
par(mfrow=c(1,3))
plot(area, main="Area")
plot(area_focal_1, main="Area Focal Operation, w/o Padding")
plot(area_focal_2, main="Area Focal Operation, w Padding")
plot(soil)
z <- zonal(area, soil, fun = "mean")
z
global(area, fun="max")
global(area, fun='sd')
spam_Y_MAIZ_A_mn <- spam_P_MAIZ_A_mn / spam_H_MAIZ_A_mn
plot(spam_Y_MAIZ_A_mn)
hist(spam_Y_MAIZ_A_mn)
# focal calculation
spam_Y_MAIZ_A_mn_focal <- focal(spam_Y_MAIZ_A_mn, w = matrix(1, nrow = 3, ncol = 3), fun = mean, na.rm=T, pad=T, padValue=NA)
# plot the yield difference
spam_Y_MAIZ_A_mn_diff <- spam_Y_MAIZ_A_mn - spam_Y_MAIZ_A_mn_focal
plot(spam_Y_MAIZ_A_mn_diff)
# Your code
# Your code
global(spam_Y_MAIZ_A_mn, 'max', na.rm=T)
global(spam_Y_MAIZ_A_mn, 'sd', na.rm=T)
# Your code
# Check for extent, resolution, and crs
area_1 <- area
ext(area_1)
area_2 <- extend(area, c(1, 2))
ext(area_2)
area_3 <- trim(area_2)
ext(area_3)
par(mfrow=c(1,3))
plot(area_1)
plot(area_2)
plot(area_3)
area_c1 = crop(area, ext(-1.5, 0.5, -0.5, 1.5))
area_c2 = crop(area, ext(-0.5, 1.5, -1.5, 0.5))
area_c1c2 = merge(area_c1, area_c2)
plot(area_c1c2)
area_c1 = crop(area, ext(-1.5, 0.5, -0.5, 1.5))
area_c2 = crop(area, ext(-0.5, 1.5, -1.5, 0.5))
area_c1c2 = merge(area_c1, area_c2)
# Plots
plot(area_c1)
plot(area_c2)
plot(area_c1c2)
area_c1 = crop(area, ext(-1.5, 0.5, -0.5, 1.5))
area_c2 = crop(area, ext(-0.5, 1.5, -1.5, 0.5))
area_c1c2 = merge(area_c1, area_c2)
# Plots
par(mfrow=c(1,3))
plot(area_c1)
plot(area_c2)
plot(area_c1c2)
area_agg = aggregate(area, fact=2, fun=sum)
# quick plot
par(mfrow=c(1,2))
plot(area)
plot(area_agg)
area_nb = disagg(area_agg, fact=2)
area_bi = disagg(area_agg, fact=2, method = "bilinear")
# plot
par(mfrow=c(1,2))
plot(area_nb)
plot(area_bi)
res(area_nb)
# classify with a 3-column classifying matrix specifying "from-to-becomes" , or a two-column matrix "is-becomes".
rcl = matrix(c(0, 12, 1, 12, 24, 2, 24, 36, 3), ncol = 3, byrow = TRUE)
rcl
area_rcl = classify(area, rcl = rcl)
plot(area_rcl)
# classify with a vector with "cuts"
breaks <- c(0, 12, 24, 36)
area_cut <- classify(area, breaks)
plot(area_cut)
# Aggregate raster files
spam_Y_MAIZ_A_mn_agg <- aggregate(spam_Y_MAIZ_A_mn, fact=2, fun=mean)
# Plot map
plot(spam_Y_MAIZ_A_mn_agg)
# Number of cells
ncell(spam_Y_MAIZ_A_mn_agg)
ncell(spam_Y_MAIZ_A_mn)
# Histogram
hist(spam_Y_MAIZ_A_mn_agg)
hist(spam_Y_MAIZ_A_mn)
# Your code
# Your code
# matrix method
spam_Y_MAIZ_A_mn_agg_rcl = classify(spam_Y_MAIZ_A_mn_agg, rcl =  matrix(c(0, 7, 1, 7, 10, 2, 10, 15, 3), ncol = 3, byrow = TRUE))
plot(spam_Y_MAIZ_A_mn_agg_rcl,  col = c('yellow', 'orange', 'dark green'))
# cut method
spam_Y_MAIZ_A_mn_agg_cut = classify(spam_Y_MAIZ_A_mn_agg, rcl=c(0, 7, 10, 15), brackets=T)
plot(spam_Y_MAIZ_A_mn_agg_cut,  col = c('yellow', 'orange', 'dark green'))
# Your code
# SpatialPolygons for cropping/masking
px <- c(0, 0, 1, 1, -1, -1)
py <- c(1.5, 0, 0, -1, -1, 1.5)
area_pol <- vect(cbind(px, py), "polygons")  # Convert to SpatVector
crs(area_pol) <- crs(area)
# plot
plot(area_pol)
area_cropped <- crop(area, area_pol)
area_masked <- mask(area, area_pol)
par(mfrow=c(1,2))
plot(area, main="Area")
plot(area_cropped, main="Area cropped")
plot(area_masked, main="Area masked")
area_cropped <- crop(area, area_pol)
area_masked <- mask(area, area_pol)
par(mfrow=c(1,3))
plot(area, main="Area")
plot(area_cropped, main="Area cropped")
plot(area_masked, main="Area masked")
# total area within selected shape
extract(area, area_pol, fun=sum, na.rm=T, df=T)
# total area within selected shape
extract(area, area_pol, fun=sum, na.rm=T)
area_pol_ras <- rasterize(area_pol, area)
area_pol_ras
plot(area_pol_ras)
# Read in MN ground water shapefile
gw_prov <- st_read("./data/MN/gw_prov")
summary(gw_prov)
# Plot
tm_shape(gw_prov) +
tm_polygons("PROVINCE")
# Subset PROVINCE 1, 2, 3
gw_prov123 <- gw_prov[gw_prov$PROVINCE %in% c("1", "2", "3"), ]
# mask
gw_prov123 <- st_transform(gw_prov123, crs=crs(spam_P_MAIZ_A_mn))  # Transform CRS to match
gw_prov123 <- vect(gw_prov123)  # Convert to SpatVector
spam_P_MAIZ_A_mn_mask <- mask(spam_P_MAIZ_A_mn, gw_prov123)
plot(spam_P_MAIZ_A_mn_mask)
# extract()
geom_sum <- extract(spam_P_MAIZ_A_mn_mask, gw_prov123, fun=sum, na.rm=T, df=T)
# extract()
geom_sum <- extract(spam_P_MAIZ_A_mn_mask, gw_prov123, fun=sum, na.rm=T)
geom_sum
# Province level total production
geom_sum$PROVINCE <- gw_prov123$PROVINCE
geom_sum <- as.data.table(geom_sum)
geom_sum[, .(PROD_TOT = sum(spam_P_MAIZ_A_mn)), by=.(PROVINCE)]
# rasterize()
gw_prov123$PROVINCE_CODE <- as.numeric(gw_prov123$PROVINCE)
gw_prov123_ras <- rasterize(gw_prov123, spam_P_MAIZ_A_mn_mask, field="PROVINCE_CODE", fun=min)
plot(gw_prov123_ras, col=c("red", "blue", "green"))
# zonal calculation
gw_prov123_zonal <- zonal(spam_P_MAIZ_A_mn_mask, gw_prov123_ras, fun = "sum", na.rm=T)
gw_prov123_zonal
# rasterize()
gw_prov123$PROVINCE_CODE <- as.numeric(gw_prov123$PROVINCE)
gw_prov123_ras <- rasterize(gw_prov123, spam_P_MAIZ_A_mn_mask, field="PROVINCE_CODE", fun=min)
plot(gw_prov123_ras, col=c("red", "blue", "green"))
# zonal calculation
gw_prov123_zonal <- zonal(spam_P_MAIZ_A_mn_mask, gw_prov123_ras, fun = "sum", na.rm=T)
gw_prov123_zonal
# Your code
# extract()
geom_sum <- extract(spam_P_MAIZ_A_mn_mask, gw_prov123, fun=sum, na.rm=T)
geom_sum
# Province level total production
geom_sum$PROVINCE <- gw_prov123$PROVINCE
geom_sum <- as.data.table(geom_sum)
geom_sum[, .(PROD_TOT = sum(spam_P_MAIZ_A_mn)), by=.(PROVINCE)]
# Your code
# Install and load packages needed for this workshop
packages_to_load <- c("sf", "spdep", "spatialreg", "tmap")
for ( package in packages_to_load ) {
# Check if package is already installed, if not, install and load the package
if (!require(package, character.only=T, quietly=T, warn.conflicts=F)) {
install.packages(package)
suppressPackageStartupMessages(library(package, character.only=T, quietly=T, warn.conflicts=F))
}
}
# Install and load packages needed for this workshop
packages_to_load <- c("sf", "spdep", "spatialreg", "tmap")
for ( package in packages_to_load ) {
# Check if package is already installed, if not, install and load the package
if (!require(package, character.only=T, quietly=T, warn.conflicts=F)) {
install.packages(package)
suppressPackageStartupMessages(library(package, character.only=T, quietly=T, warn.conflicts=F))
}
}
# read in our example shape file: pest pressure for selected MN counties
mnp <- st_read("./data/shp/mnp")
mnp <- st_as_sf(mnp)
str(mnp)
# plot the PEST variable
tm_shape(mnp) +
tm_polygons(col="PEST", border.col="grey50", lwd=.4)
# calculate neighboring using Queen's case (default)
mnp_nbq <- poly2nb(mnp, queen=TRUE)
mnp_nbq
# structure of a spatial neighbor object
str(mnp_nbq)
# quick plot
plot(mnp$geometry, border = "grey60")
plot(mnp_nbq, st_coordinates(st_centroid(st_geometry(mnp))), add=T)
# calculate neighboring using Rook's case
mnp_nbr <- poly2nb(mnp, queen=FALSE)
mnp_nbr
# K-nearest neighbors
mnp_nbk <- knn2nb(knearneigh(st_centroid(st_geometry(mnp)), k=3))
mnp_nbk
# Neighborhood continuity by distance
mnp_nbd <- dnearneigh(st_centroid(st_geometry(mnp)), d1 = 0, d2 = 100000) # neighbors within 100 km
mnp_nbd
# Plot
par(mfrow = c(2, 2))
par(mai=c(0,0,0.2,0))
plt_coord <- st_coordinates(st_centroid(st_geometry(mnp)))
plot(mnp$geometry, border = "grey60", main = "Queen's Case Contiguity")
plot(mnp_nbq, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mnp$geometry, border = "grey60", main = "Rook's Contiguity")
plot(mnp_nbr, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mnp$geometry, border = "grey60", main = "K-nearest Neighbors")
plot(mnp_nbk, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mnp$geometry, border = "grey60", main = "Distance")
plot(mnp_nbd, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
# Spatial Weight Objects -- Row Standardized
mnp_lw_w <- nb2listw(mnp_nbq)
summary(mnp_lw_w)
# structure of the Spatial Weight Objects
str(mnp_lw_w)
# Summary of the weights
summary(unlist(mnp_lw_w$weights))
# Sum of the weights
sapply(mnp_lw_w$weights, sum)
# A matrix view of the weight assigned
round(listw2mat(mnp_lw_w), 2)
# Spatial Weight Objects -- Binary
mnp_lw_b <- nb2listw(mnp_nbq, style="B")
summary(mnp_lw_b)
# Structure of the spatial weight objects
str(mnp_lw_b)
# Summary of the weights
summary(unlist(mnp_lw_b$weights))
# Sum of weights by list
sapply(mnp_lw_b$weights, sum)
# Matrix view of the weights
listw2mat(mnp_lw_b)
# Matrix view of the weights
listw2mat(mnp_lw_b)[1:5, 1:5]
# Matrix view of the weights
listw2mat(mnp_lw_b)[1:10, 1:10]
moran.test(mnp$PEST, listw = mnp_lw_w)
moran.plot(mnp$PEST, listw = mnp_lw_w)
# manually create a spatila lag for PEST variable
mnp$L.PEST <- lag.listw(mnp_lw_w, mnp$PEST)
plot(mnp$PEST, mnp$L.PEST)
# Spatial Lag Model (SLM)
mnp_slm <- lagsarlm(PEST ~ HOST, data=mnp, listw =mnp_lw_w)
summary(mnp_slm)
# SLX
mnp_slx <- lmSLX(PEST ~ HOST, data=mnp, listw =mnp_lw_w)
summary(mnp_slx)
# Spatial Error Model (SEM)
mnp_sem <- errorsarlm(PEST ~ HOST, data=mnp, listw =mnp_lw_w)
summary(mnp_sem)
# Spatial Autocorrelation Model (SAC)
mnp_sac <- sacsarlm(PEST ~ HOST, data=mnp, listw =mnp_lw_w)
summary(mnp_sac)
# Spatial Durbin Model (SDM)
mnp_sdm <- lagsarlm(PEST ~ HOST, data=mnp, listw=mnp_lw_w, type="mixed")
summary(mnp_sdm)
# Spatial Durbin Error Model (SDEM)
mnp_sdem <- errorsarlm(PEST ~ HOST, data=mnp, listw =mnp_lw_w, etype="emixed")
summary(mnp_sdem)
# General Nesting Spatial Model (GNS)
mnp_gns <- sacsarlm(PEST ~ HOST, data=mnp, listw =mnp_lw_w, type="sacmixed")
summary(mnp_gns)
# OLS
mnp_ols <- lm(PEST ~ HOST, data=mnp)
summary(mnp_ols)
# Check for spatial autocorrelation
moran.test(mnp_ols$residuals, mnp_lw_w)
moran.plot(mnp_ols$residuals, mnp_lw_w)
summary(lm.LMtests(mnp_ols, mnp_lw_w, test=c("all")))
# General Nesting Spatial Model (GNS)
mnp_gns <- sacsarlm(PEST ~ HOST, data=mnp, listw =mnp_lw_w, type="sacmixed")
summary(mnp_gns)
impacts(mnp_slm, listw = mnp_lw_w)
# Plot
par(mfrow = c(2, 2))
par(mai=c(0,0,0.2,0))
plt_coord <- st_coordinates(st_centroid(st_geometry(mnp)))
plot(mnp$geometry, border = "grey60", main = "Queen's Case Contiguity")
plot(mnp_nbq, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mnp$geometry, border = "grey60", main = "Rook's Contiguity")
plot(mnp_nbr, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mnp$geometry, border = "grey60", main = "K-nearest Neighbors")
plot(mnp_nbk, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mnp$geometry, border = "grey60", main = "Distance")
plot(mnp_nbd, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
# Your answer
# Step 1:
# Read MWI shape file
mwi_sf <- st_read("./data/shp/MWI") #shapefiles called only using data source name (dsn)
mwi_sf
# Step 2:
#neighbor objects
#-------------
mwi_nbq <- poly2nb(mwi_sf) #queen's case by default
mwi_nbr <- poly2nb(mwi_sf, queen = FALSE) #rook's case
mwi_nbk <- knn2nb(knearneigh(st_centroid(st_geometry(mwi_sf)), k = 3)) #3 nearest neighbors
mwi_nbd <- dnearneigh(st_centroid(st_geometry(mwi_sf)), d1 = 0, d2 = 1, longlat = TRUE) #neighbors within 1 degree
# Step 3:
summary(mwi_nbq)
summary(mwi_nbr)
summary(mwi_nbk)
summary(mwi_nbd)
# Step 4:
par(mfrow = c(1, 4))
par(mar=c(0,0,2,0))
mwi_coord <- st_coordinates(st_centroid(st_geometry(mwi_sf)))
plot(mwi_sf$geometry, border = "grey60", main = "Queen's Case Contiguity")
plot(mwi_nbq, mwi_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mwi_sf$geometry, border = "grey60", main = "Rook's Contiguity")
plot(mwi_nbr, mwi_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mwi_sf$geometry, border = "grey60", main = "K-nearest Neighbors")
plot(mwi_nbk, mwi_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mwi_sf$geometry, border = "grey60", main = "Distance")
plot(mwi_nbd, mwi_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
# Your answer
# Step 1:
# Read MWI shape file
mwi_sf <- st_read("./data/shp/MWI") #shapefiles called only using data source name (dsn)
mwi_sf
# Step 2:
#neighbor objects
#-------------
mwi_nbq <- poly2nb(mwi_sf) #queen's case by default
mwi_nbr <- poly2nb(mwi_sf, queen = FALSE) #rook's case
mwi_nbk <- knn2nb(knearneigh(st_centroid(st_geometry(mwi_sf)), k = 3)) #3 nearest neighbors
mwi_nbd <- dnearneigh(st_centroid(st_geometry(mwi_sf)), d1 = 0, d2 = 1, longlat = TRUE) #neighbors within 1 degree
# Step 3:
summary(mwi_nbq)
summary(mwi_nbr)
summary(mwi_nbk)
summary(mwi_nbd)
# Step 4:
par(mfrow = c(1, 4))
par(mar=c(0,0,2,0))
mwi_coord <- st_coordinates(st_centroid(st_geometry(mwi_sf)))
plot(mwi_sf$geometry, border = "grey60", main = "Queen's Case Contiguity")
plot(mwi_nbq, mwi_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mwi_sf$geometry, border = "grey60", main = "Rook's Contiguity")
plot(mwi_nbr, mwi_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mwi_sf$geometry, border = "grey60", main = "K-nearest Neighbors")
plot(mwi_nbk, mwi_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mwi_sf$geometry, border = "grey60", main = "Distance")
plot(mwi_nbd, mwi_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
# Your answer
# Matrix view of the weights (only showing first 10 rows x 10cols)
listw2mat(mnp_lw_b)
# Spatial Lag Model (SLM)
mnp_slm <- lagsarlm(PEST ~ HOST, data=mnp, listw =mnp_lw_w)
summary(mnp_slm)
impacts(mnp_slm, listw = mnp_lw_w)
# Install and load packages needed for this workshop
packages_to_load <- c("sf", "spdep", "spatialreg", "tmap")
for ( package in packages_to_load ) {
# Check if package is already installed, if not, install and load the package
if (!require(package, character.only=T, quietly=T, warn.conflicts=F)) {
install.packages(package)
suppressPackageStartupMessages(library(package, character.only=T, quietly=T, warn.conflicts=F))
}
}
# read in our example shape file: pest pressure for selected MN counties
mnp <- st_read("./data/shp/mnp")
mnp <- st_as_sf(mnp)
str(mnp)
# plot the PEST variable
tm_shape(mnp) +
tm_polygons(col="PEST", border.col="grey50", lwd=.4)
# calculate neighboring using Queen's case (default)
mnp_nbq <- poly2nb(mnp, queen=TRUE)
mnp_nbq
# structure of a spatial neighbor object
str(mnp_nbq)
# quick plot
plot(mnp$geometry, border = "grey60")
plot(mnp_nbq, st_coordinates(st_centroid(st_geometry(mnp))), add=T)
# calculate neighboring using Rook's case
mnp_nbr <- poly2nb(mnp, queen=FALSE)
mnp_nbr
# K-nearest neighbors
mnp_nbk <- knn2nb(knearneigh(st_centroid(st_geometry(mnp)), k=3))
mnp_nbk
# Neighborhood continuity by distance
mnp_nbd <- dnearneigh(st_centroid(st_geometry(mnp)), d1 = 0, d2 = 100000) # neighbors within 100 km
mnp_nbd
# Plot
par(mfrow = c(2, 2))
par(mai=c(0,0,0.2,0))
plt_coord <- st_coordinates(st_centroid(st_geometry(mnp)))
plot(mnp$geometry, border = "grey60", main = "Queen's Case Contiguity")
plot(mnp_nbq, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mnp$geometry, border = "grey60", main = "Rook's Contiguity")
plot(mnp_nbr, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mnp$geometry, border = "grey60", main = "K-nearest Neighbors")
plot(mnp_nbk, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
plot(mnp$geometry, border = "grey60", main = "Distance")
plot(mnp_nbd, plt_coord, pch = 19, cex = 0.6, col="red", add = TRUE)
setwd("~/GitHub/GEMS-X003-Geospatial-Analysis-R-Raster")
